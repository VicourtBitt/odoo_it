Claro! Entendido. Voc√™ quer um fluxo de desenvolvimento completo no Odoo 14 para adicionar um bot√£o em uma linha de uma tree view que abre um wizard (pop-up) e, ao confirmar nesse wizard, os dados s√£o salvos em um novo modelo.
Vamos quebrar isso em partes.
üêß Conceitos-Chave para Aprender
Antes do c√≥digo, vamos solidificar os conceitos que voc√™ perguntou:
 * Wizards (Assistentes):
   * No Odoo, um wizard n√£o √© um tipo especial de "coisa". Ele √© apenas um modelo normal que herda de models.TransientModel em vez de models.Model.
   * A √∫nica diferen√ßa √© que o Odoo limpa (apaga) os registros de TransientModel periodicamente.
   * Eles s√£o perfeitos para coletar informa√ß√µes tempor√°rias do usu√°rio (como em um pop-up) antes de realizar uma a√ß√£o.
   * Voc√™ cria views de formul√°rio (<form>) para eles, assim como qualquer outro modelo.
 * M√©todos Auxiliares (A√ß√µes de Bot√£o):
   * Qualquer m√©todo Python que voc√™ define em seu modelo pode ser chamado por um bot√£o na view XML.
   * A "m√°gica" est√° na defini√ß√£o do bot√£o no XML:
     * <button name="meu_metodo_python" type="object">: Isso informa ao Odoo para chamar o m√©todo Python chamado meu_metodo_python no modelo atual.
     * <button name="meu_modulo.minha_acao_xml" type="action">: Isso informa ao Odoo para executar a A√ß√£o de Janela (Window Action) com o ID meu_modulo.minha_acao_xml.
 * Fluxo do seu Caso:
   * Tree View (Bot√£o): O bot√£o na tree view ser√° type="object" e chamar√° um m√©todo (ex: action_open_request_wizard).
   * M√©todo action_open_request_wizard (Python): Este m√©todo n√£o far√° l√≥gica, ele apenas retornar√° uma a√ß√£o que diz ao Odoo "Abra este wizard em um pop-up".
   * Wizard View (Bot√£o "Confirmar"): O bot√£o no rodap√© do wizard ser√° type="object" e chamar√° o m√©todo principal (ex: action_create_request).
   * M√©todo action_create_request (Python): Este m√©todo, dentro do modelo do wizard, ler√° os dados do pr√≥prio wizard (usando self.observacao, etc.) e far√° o self.env['resource.request'].create(...).
üöÄ Passo a Passo: Implementa√ß√£o Completa
Aqui est√° um guia de como construir isso, assumindo que seu m√≥dulo se chama meu_modulo.
1. Definir o Modelo de Destino (resource.request)
Este √© o modelo permanente que armazenar√° os dados.
models/resource_request.py:
from odoo import models, fields

class ResourceRequest(models.Model):
    _name = 'resource.request'
    _description = 'Solicita√ß√£o de Recurso'

    # O Odoo geralmente precisa de um campo 'name'
    name = fields.Char('Refer√™ncia', required=True, copy=False, readonly=True, default='Novo') 
    
    # Os 3 campos que voc√™ mencionou
    observacao = fields.Text('Observa√ß√£o')
    pedido_id = fields.Many2one('sale.order', string='Pedido') # Ex: se for um Pedido de Venda
    atribuido_id = fields.Many2one('res.partner', string='Atribu√≠do a')

    # Exemplo de como gerar uma sequ√™ncia para o campo 'name'
    @api.model
    def create(self, vals):
        if vals.get('name', 'Novo') == 'Novo':
            vals['name'] = self.env['ir.sequence'].next_by_code('resource.request') or 'Novo'
        return super(ResourceRequest, self).create(vals)

2. Definir o Modelo do Wizard (resource.request.wizard)
Este √© o modelo TransientModel para o pop-up.
wizard/resource_request_wizard.py:
from odoo import models, fields, api

class ResourceRequestWizard(models.TransientModel):
    _name = 'resource.request.wizard'
    _description = 'Wizard: Criar Solicita√ß√£o de Recurso'

    # Os 3 campos que voc√™ quer que apare√ßam no wizard
    observacao = fields.Text('Observa√ß√£o')
    pedido_id = fields.Many2one('sale.order', string='Pedido') 
    atribuido_id = fields.Many2one('res.partner', string='Atribu√≠do a')

    """
    PASSO 7: Este √© o m√©todo auxiliar chamado pelo bot√£o 'Confirmar' do wizard.
    √â aqui que a m√°gica de 'salvar no outro modelo' acontece.
    """
    def action_create_resource_request(self):
        self.ensure_one() # Garante que estamos executando em um √∫nico registro do wizard
        
        RequestModel = self.env['resource.request']
        
        # Prepara o dicion√°rio de valores para o novo registro
        vals = {
            'observacao': self.observacao,
            'pedido_id': self.pedido_id.id,
            'atribuido_id': self.atribuido_id.id,
            # 'name' ser√° preenchido pelo 'create' do 'resource.request'
        }
        
        # Cria o registro no modelo 'resource.request'
        new_request = RequestModel.create(vals)
        
        # (Opcional) Abrir o registro rec√©m-criado
        return {
            'type': 'ir.actions.act_window',
            'name': 'Solicita√ß√£o Criada',
            'res_model': 'resource.request',
            'res_id': new_request.id,
            'view_mode': 'form',
            'view_id': self.env.ref('meu_modulo.view_resource_request_form').id, # Crie esta view
            'target': 'current', # 'current' fecha o wizard e abre o form
        }

3. Criar a View (Form) do Wizard (XML)
Este √© o layout do seu pop-up.
wizard/resource_request_wizard_views.xml:
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="resource_request_wizard_form_view" model="ir.ui.view">
        <field name="name">resource.request.wizard.form</field>
        <field name="model">resource.request.wizard</field>
        <field name="arch" type="xml">
            <form string="Criar Solicita√ß√£o de Recurso">
                <group>
                    <field name="observacao"/>
                    <field name="pedido_id"/>
                    <field name="atribuido_id"/>
                </group>
                <footer>
                    <button name="action_create_resource_request" string="Confirmar" type="object" class="btn-primary"/>
                    
                    <button string="Cancelar" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>

    <record id="action_open_resource_request_wizard" model="ir.actions.act_window">
        <field name="name">Criar Solicita√ß√£o de Recurso</field>
        <field name="res_model">resource.request.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field> <field name="view_id" ref="resource_request_wizard_form_view"/>
    </record>
</odoo>

4. Adicionar o Bot√£o (Control) na Tree View (XML)
Agora, modificamos a tree view existente para adicionar o bot√£o. Vou supor que voc√™ quer adicionar na tree view de Pedidos de Venda (sale.order) e quer usar o sale.order da linha para pr√©-preencher o wizard.
views/sale_order_views.xml:
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="sale_order_tree_inherit_resource_request" model="ir.ui.view">
        <field name="name">sale.order.tree.inherit</field>
        <field name="model">sale.order</field>
        <field name="inherit_id" ref="sale.view_order_tree"/>
        <field name="arch" type="xml">
            
            <xpath expr="//field[@name='name']" position="after">
                <button name="action_open_request_wizard" 
                        type="object" 
                        string="Criar Solicita√ß√£o" 
                        icon="fa-plus-square"/> 
            </xpath>
            
        </field>
    </record>
</odoo>

5. Criar o M√©todo Python para Abrir o Wizard
Este √© o m√©todo action_open_request_wizard que o bot√£o acima chama. Ele deve ser definido no modelo sale.order.
models/sale_order.py:
from odoo import models, fields, api

class SaleOrder(models.Model):
    _inherit = 'sale.order'

    """
    PASSO 6: Este √© o m√©todo auxiliar chamado pelo bot√£o na TREE VIEW.
    Sua √∫nica fun√ß√£o √© retornar a a√ß√£o que abre o wizard.
    """
    def action_open_request_wizard(self):
        self.ensure_one() # Garante que foi clicado em uma √∫nica linha
        
        # --- Pr√©-preenchendo o Wizard ---
        # Usamos 'context' para passar valores padr√£o para o wizard.
        # As chaves devem ser 'default_NOME_DO_CAMPO'.
        default_context = {
            'default_pedido_id': self.id,
            'default_atribuido_id': self.partner_id.id, # Ex: Pega o cliente do pedido
        }

        # Carrega a A√ß√£o XML que criamos no PASSO 3
        action = self.env['ir.actions.act_window']._for_xml_id('meu_modulo.action_open_resource_request_wizard')
        
        # Adiciona o contexto com os valores padr√£o
        action['context'] = default_context
        
        return action

Resumo do Fluxo
 * Usu√°rio clica no bot√£o "Criar Solicita√ß√£o" na linha de um Pedido de Venda.
 * O Odoo chama o m√©todo action_open_request_wizard (no sale.order).
 * Este m√©todo retorna a a√ß√£o action_open_resource_request_wizard, passando default_pedido_id e default_atribuido_id no contexto.
 * O Odoo abre o wizard (resource.request.wizard) em um pop-up, e os campos "Pedido" e "Atribu√≠do a" j√° v√™m preenchidos.
 * O usu√°rio preenche a "Observa√ß√£o" e clica em "Confirmar".
 * O Odoo chama o m√©todo action_create_resource_request (no resource.request.wizard).
 * Este m√©todo l√™ os valores (self.observacao, self.pedido_id, etc.) e cria um novo registro em resource.request.
 * O m√©todo retorna uma a√ß√£o para fechar o pop-up e abrir o novo registro resource.request criado.
Espero que este guia detalhado ajude a clarear o processo!
Posso ajudar a detalhar alguma parte espec√≠fica desse fluxo, como a cria√ß√£o das views ou o registro dos arquivos no __manifest__.py?
